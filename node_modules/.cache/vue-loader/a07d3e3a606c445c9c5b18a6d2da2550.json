{"remainingRequest":"C:\\Users\\haoyu Song\\Downloads\\前台项目\\sph_qiantai\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\haoyu Song\\Downloads\\前台项目\\sph_qiantai\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\haoyu Song\\Downloads\\前台项目\\sph_qiantai\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\haoyu Song\\Downloads\\前台项目\\sph_qiantai\\src\\pages\\detail\\index.vue?vue&type=template&id=98596bd0&scoped=true&","dependencies":[{"path":"C:\\Users\\haoyu Song\\Downloads\\前台项目\\sph_qiantai\\src\\pages\\detail\\index.vue","mtime":1652872868507},{"path":"C:\\Users\\haoyu Song\\Downloads\\前台项目\\sph_qiantai\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\haoyu Song\\Downloads\\前台项目\\sph_qiantai\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\haoyu Song\\Downloads\\前台项目\\sph_qiantai\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\haoyu Song\\Downloads\\前台项目\\sph_qiantai\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}